package com.myweb.www.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.myweb.www.domain.CommentVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.CommentService;

import lombok.extern.slf4j.Slf4j;
@Slf4j
@RequestMapping("/comment/*")
@RestController
public class CommentController {
		
	@Inject
	private CommentService scv;
	
	//ResponseEntity 객체를 사용
		//@RequestBody : body값 추출
		//value = "mapping name", consumes : 가져오는 데이터의 형태
		//produces : 보내는 데이터의 형식 나가는 데이터 타입 : MediaType.
		// json : application/json text : text_plain
	
	
	//ResponseEntity 객체를 사용
	//@RequestBody : body값 추출
	//value = "mapping name", consumes : 가져오는 데이터의 형태
	//produces : 보내는 데이터의 형식 나가는 데이터 타입 : MediaType.
	// json : application/json text : text_plain
	
	@PostMapping(value = "/post", consumes = "application/json", 
			produces = MediaType.TEXT_PLAIN_VALUE)
	//PostMapping: 이 어노테이션은 HTTP POST 요청을 처리하는 메서드임을 표시합니다.
	//value = "/post": 요청 경로(/post)를 지정합니다. 이 메서드는 클라이언트가 
	//"/post" 경로로 POST 요청을 보낼 때 호출됩니다.
	//consumes = "application/json": 이 메서드가 JSON 형식의 요청 본문을 소비(Consume)할 수 있음을 나타냅니다. 
	//즉, 클라이언트가 JSON 형식의 데이터를 요청 본문에 담아 전송하면 이 메서드가 처리할 수 있습니다.
	//produces = MediaType.TEXT_PLAIN_VALUE: 이 메서드가 평문 텍스트(text/plain) 
	//형식의 응답을 생성(Produce)할 수 있음을 나타냅니다.
	public ResponseEntity<String> post(@RequestBody CommentVO cvo) {
		
		//public: 이 메서드는 공개된(public) 메서드입니다.
		//ResponseEntity<String>: 이 메서드는 ResponseEntity를 반환합니다. 
		//ResponseEntity는 HTTP 응답을 나타내는 스프링 프레임워크의 클래스입니다. 
		//이 클래스는 응답 본문과 HTTP 상태 코드를 포함할 수 있습니다.
		//post: 메서드의 이름은 "post"입니다.
		//@RequestBody CommentVO cvo: 이 부분은 메서드 매개변수를 정의합니다. 
		//@RequestBody 어노테이션은 요청 본문에 있는 데이터를 자바 객체로 변환하라는 지시를 내립니다. 
		//cvo는 CommentVO 타입의 객체로, JSON 요청 본문이 이 객체로 역직렬화됩니다.
		log.info(">>"+cvo);
		int isOK = scv.post(cvo);
		
		return  isOK > 0 ? new ResponseEntity<String>("1", HttpStatus.OK) : new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@GetMapping(value="{bno}/{page}", produces = MediaType.APPLICATION_JSON_VALUE)
	//@GetMapping: 이 어노테이션은 HTTP GET 요청을 처리하는 메서드임을 표시합니다.
	//value="{bno}": {bno}는 URL 경로 변수로, 클라이언트가 요청 URL에서 해당 위치에 실제 값을 전달합니다. 
	//이 메서드는 "/{bno}"와 같은 경로로 GET 요청을 받습니다. 예를 들어, "/1"과 같은 URL에서 "1"은 bno 변수로 전달됩니다.
	//produces = MediaType.TEXT_PLAIN_VALUE: 
	//이 메서드가 text/plain 형식의 응답을 생성(Produce)할 수 있음을 나타냅니다.
	public ResponseEntity<PagingHandler> spread(@PathVariable("bno") long bno,
			@PathVariable("page")int page) {
		
		//public: 이 메서드는 공개된(public) 메서드입니다.
		//ResponseEntity<List<CommentVO>>: 이 메서드는 ResponseEntity를 반환합니다. 
		//ResponseEntity는 HTTP 응답을 나타내는 스프링 프레임워크의 클래스입니다. 
		//이 클래스는 응답 본문과 HTTP 상태 코드를 포함할 수 있습니다.
		//spread: 메서드의 이름은 "spread"입니다.
		//@PathVariable("bno") int bno: 이 부분은 메서드의 매개변수를 정의합니다. 
		//@PathVariable 어노테이션은 URL 경로 변수에서 값을 추출하라는 지시를 내립니다. 
		//"bno"는 URL 경로 변수의 이름이며, int bno는 추출된 값을 bno 변수에 할당하는 부분입니다.

		PagingVO pgvo = new PagingVO(page, 5);
		//DB 요청
//		List<CommentVO> list = scv.getList(bno);
		return new ResponseEntity<PagingHandler>(scv.getList(bno, pgvo), HttpStatus.OK);
	}
	
	@DeleteMapping(value = "/{cno}", 
			produces = MediaType.TEXT_PLAIN_VALUE)
	
	public ResponseEntity<String> remove(@PathVariable("cno") int cno) {
		
		int isOK = scv.remove(cno);
		return isOK > 0 ? new ResponseEntity<String>("1", HttpStatus.OK) : new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR); 
	}
	
	@PutMapping(value="/{cno}", 
			consumes = "application/json", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> edit(@RequestBody CommentVO cvo) {
		log.info(" >>> cvo" + cvo);

		int isOK = scv.edit(cvo);

		return isOK > 0 ? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	

}
